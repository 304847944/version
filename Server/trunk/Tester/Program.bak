using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using DapperQ;
using MySql.Data.MySqlClient;

namespace Tester
{
    class Program
    {
        static DapperQ<User> p1;
        static DapperQ<Image> p2;
        static DapperQ<Message> p3;
        static void Main(string[] args)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();

            p1 = new DapperQ<User>(new MySqlConnection());
            p2 = new DapperQ<Image>(new MySqlConnection());
            var q1 = (from a in p1.AsQueryable() where a.Level > 1 && a.Type == 1 orderby a.Id descending select a)
                .Union
                (from b in p1.AsQueryable() where (b.Level == 1 && b.Type == 2) || b.IsOpen != true orderby b.Id select b);

            var q2 = q1.Where(o => o.Id > 0).GroupBy(g => g.Name);

            Console.WriteLine(q2.ToString());
            p1.Dispose();
            p2.Dispose();
            Console.WriteLine("-----------------------------------------------------------------------------");



            p2 = new DapperQ<Image>(new MySqlConnection());
            Console.WriteLine(p2.AsQueryable().Where(o => o.Level > 1).Where(o => o.IsOpen == true).Take(20).Skip(10).ToString());
            p2.Dispose();
            Console.WriteLine("-----------------------------------------------------------------------------");



            p2 = new DapperQ<Image>(new MySqlConnection());
            var q3 = from c in p2.AsQueryable() where c.Name.Contains("GOOD") select new { c.Id, c.Name, c.Path, c.Url };
            Console.WriteLine(q3.ToString());
            p2.Dispose();
            Console.WriteLine("-----------------------------------------------------------------------------");


            p1 = new DapperQ<User>(new MySqlConnection());
            p2 = new DapperQ<Image>(new MySqlConnection());
            var q4 = from d in p1.AsQueryable()
                     join e in p2.AsQueryable() on d.Id equals e.Id into ords
                     from f in ords.DefaultIfEmpty()
                     where d.IsOpen == true
                     select new { f.Name, f.Path };
            p1.Dispose();
            p2.Dispose();
            Console.WriteLine(q4.ToString());
            Console.WriteLine("-----------------------------------------------------------------------------");



            p1 = new DapperQ<User>(new MySqlConnection());
            p2 = new DapperQ<Image>(new MySqlConnection());
            p3 = new DapperQ<Message>(new MySqlConnection());
            var q5 = from g in p1.AsQueryable()
                     join h in p2.AsQueryable() on g.Id equals h.Id
                     join i in p3.AsQueryable() on h.Id equals i.UserId
                     where h.IsOpen == true
                     select new { g.Name, h.Path };

            Console.WriteLine(q5.ToString());
            p1.Dispose();
            p2.Dispose();
            p3.Dispose();
            Console.WriteLine("-----------------------------------------------------------------------------");



            try
            {
                p2 = new DapperQ<Image>(new MySqlConnection());
                p2.CreateIndex("idx1");
                p2.Dispose();

                p2 = new DapperQ<Image>(new MySqlConnection());
                p2.Drop();
                p2.Dispose();

                p2 = new DapperQ<Image>(new MySqlConnection());
                p2.DropIndex("idx1");
                p2.Dispose();

                p2 = new DapperQ<Image>(new MySqlConnection());
                var isExists = p2.Exists(o=>o.IsOpen==true);
                p2.Dispose();

                p2 = new DapperQ<Image>(new MySqlConnection());
                var indexNames = p2.GetIndexes();
                p2.Dispose();

                p2 = new DapperQ<Image>(new MySqlConnection());
                var flag = p2.IndexExistsByName("a");
                p2.Dispose();

                p2 = new DapperQ<Image>(new MySqlConnection());
                var q7 = from c in p2.AsQueryable() where c.Name.Contains("good") select new {c.Id, c.Name};
                Console.WriteLine(q7.ToString<Photo>(DapperQ.Action.InsertSelect));
                q7.Insert<Photo>();
                p2.Dispose();
                Console.WriteLine("-----------------------------------------------------------------------------");



                p2 = new DapperQ<Image>(new MySqlConnection());
                var q8 = from c in p2.AsQueryable() where c.Name.Contains("good") select new { Id = c.Id, Name = c.Name };
                Console.WriteLine(q8.ToString(DapperQ.Action.UpdateSelect, o => new { Id = 1, Name = "test" }));
                q8.Update(o => new { Id = 1, Name = "test" });
                p2.Dispose();
                Console.WriteLine("-----------------------------------------------------------------------------");



                p2 = new DapperQ<Image>(new MySqlConnection());
                var q9 = from c in p2.AsQueryable() where c.Name.Contains("good") select c;
                Console.WriteLine(q9.ToString(DapperQ.Action.DeleteSelect));
                q9.Remove();
                p2.Dispose();
                Console.WriteLine("-----------------------------------------------------------------------------");


                p2 = new DapperQ<Image>(new MySqlConnection());
                p2.Insert(new Image { Url = "root", Name = "a.jpg" });
                p2.Dispose();



                p2 = new DapperQ<Image>(new MySqlConnection());
                p2.Update(o => new Image { Url = "root", Name = "a.jpg" }, o => o.Name == string.Empty);
                p2.Dispose();


                p2 = new DapperQ<Image>(new MySqlConnection());
                p2.Remove(o => o.IsOpen == false);
                p2.Dispose();

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine("-----------------------------------------------------------------------------");
            }

            stopwatch.Stop();
            TimeSpan timeSpan = stopwatch.Elapsed;
            Console.WriteLine(string.Format("times: {0}", timeSpan.TotalMilliseconds));

            Console.ReadLine();
        }

        private static bool GetTrue(bool flag)
        {
            return flag;
        }
    }
}
